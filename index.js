const TelegramBot = require("node-telegram-bot-api");

const token = `5822446202:AAEOFqPu1TjbTPKR1JhQhYOzpBcr2OZZe_U`;
const webAppUrl = "https://strong-starburst-f8427e.netlify.app/";

const bot = new TelegramBot(token, { polling: true });

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === "/start") {
    const message =
      "–ü—Ä–∏–≤–µ—Ç, –õ—é–±–∏–º–∫–∞‚ù£Ô∏è! –ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–µ —Ç–µ—Ä—è—Ç—å –Ω–∏ —Å–µ–∫—É–Ω–¥—ã –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–æ—á–∫–∞–º!";
    await bot.sendMessage(chatId, message, {
      reply_markup: {
        keyboard: [
          [{ text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–æ—á–∫–∞–ºüß∂", web_app: { url: webAppUrl } }],
        ],
      },
    });
  }

  if (msg?.web_app_data?.data) {
    const data = JSON.parse(msg?.web_app_data?.data);
    console.log(data);
    await bot.sendMessage(
      chatId,
      `
–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n
–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞: ${data?.country || "–≤—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å :("}\n
–í–∞—à–∞ —É–ª–∏—Ü–∞: ${data?.street || "–≤—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å :("}\n
–í–∞—à –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:: ${data?.postindex || "–≤—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å :("}\n
–í–∞—à–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω: ${data?.phone || "–≤—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å :("}\n
    `
    );

    await bot.sendMessage(chatId, "–í—Å–µ –≤–µ—Ä–Ω–æ?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–î–∞", callback_data: "yes" }, { text: "–ù–µ—Ç", callback_data: "no" }],
        ],
      },
    });
  }
  
});


bot.on('callback_query', (query) => {
  const chatId = msg.chat.id;
  switch (query.data) {
    case 'yes':
      bot.sendMessage(chatId, '–°—É–ø–µ—Ä! –î–ª—è –æ–ø–ª–∞—Ç—ã –º—ã —Å –≤–∞–º–∏ üß∂—Å–≤—è–∂–∏–º—Å—èüß∂');
      break;
    case 'no':
      bot.sendMessage(chatId, '–û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ, –Ω–æ —É –≤–∞—Å –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!');
      break;
  }
})